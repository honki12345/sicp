#lang sicp
(define (even? n)
  (= (remainder n 2) 0))
(define (double x)
  (* x 2))
(define (halve x)
  (/ x 2))
(define (fast-mult a b)
  (define (fast-mult-iter a b c)
    (cond ((= b 0) c)
          ((even? b) (fast-mult-iter (double a) (halve b) c))
          (else (fast-mult-iter a (- b 1) (+ a c)))))
  (fast-mult-iter a b 0))
(fast-mult 3 3)
(fast-mult 3 4)